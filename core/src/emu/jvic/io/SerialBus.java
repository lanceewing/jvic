package emu.jvic.io;

import java.util.ArrayList;
import java.util.HashSet;

/**
 * This class emulates the Commodore IEC serial bus.
 * 
 * The serial bus lines are open collector. The individual devices can pull the lines
 * down to ground to indicate that the signal is TRUE (they use an open collector inverter
 * to do this), but if the signal should be FALSE, then they let the line float. If no
 * device is pulling a line down, then all devices interpret that as a FALSE value for 
 * that line (they have internal pull ups that then get inverted to become a LOW signal).
 * 
 *  -A line will become "true" (PULLED DOWN, or 0V) if one or more devices signal true;
 *  -A line will become "false" (RELEASED, or 5V) only if all devices signal false. 
 * 
 * We emulate this behaviour by using a HashSet for each line that keeps track of what
 * devices (or caller to this class) are currently pulling each line down. There can be
 * multiple devices pulling a line down at the same time. Only when a HashSet is empty
 * will the associated line be considered floating.
 * 
 * @author Lance Ewing
 */
public class SerialBus {

  /**
   * Pull down HashSet for the ATN (attention) line. It is only the VIC 20 that will 
   * pull this line down, but we treat it the same as the other lines for consistency.
   * 
   * Sending any byte with the ATN line low (sending under attention) causes it to be 
   * interpreted as a bus command for peripherals on the serial bus. When the VIC 20 
   * brings this signal LOW, all other devices start listening for it to transmit an 
   * address. The device addressed must respond in a preset period of time; otherwise, 
   * the VIC 20 will assume that the device addressed is not on the bus.
   */
  private HashSet<Object> attentionPullDowns;
  
  /**
   * Pull down HashSet for the DATA line.
   * 
   * The data will be transferred via this line sequentially bit by bit. A byte 
   * transmission starts with bit 0 LSB and ends with bit 7 MSB.
   */
  private HashSet<Object> dataPullDowns;
  
  /**
   * Pull down HashSet for the CLK (clock) line.
   * 
   * This signal is for timing the data sent on the serial bus. This signal is always 
   * generated by the active TALKER. RISING EDGE OF THE CLOCK means data bit is valid. 
   */
  private HashSet<Object> clockPullDowns;
  
  
  // DEBUG FEATURES
  
  // History of each of the serial bus lines.
  String dataList = "0";
  String clockList = "0";
  String atnList = "0";
  
  boolean lastAtn;
  boolean lastData;
  boolean lastClock;
  
  int cyclesWithNoChanges;
  
  public boolean debug = false;
  
  public void record() {
    if (debug) {
      boolean newAtn = getAtn();
      boolean newData = getData();
      boolean newClock = getClock();
      
      boolean noChanges = ((lastAtn == newAtn) && (lastData == newData) && (lastClock == newClock));
      
      if (!noChanges) {
        atnList += ((lastAtn == newAtn)? "." : (newAtn? "1" : "0"));
        dataList += ((lastData == newData)? "." : (newData? "1" : "0"));
        clockList += ((lastClock == newClock)? "." : (newClock? "1" : "0"));
      }
      
      lastAtn = newAtn;
      lastData = newData;
      lastClock = newClock;
    }
  }
  
  /**
   * Constructor for SerialBus.
   */
  public SerialBus() {
    attentionPullDowns = new HashSet<Object>();
    dataPullDowns = new HashSet<Object>();
    clockPullDowns = new HashSet<Object>();
  }
  
  /**
   * Clears all pull down state of the lines and makes them floating.
   */
  public void reset() {
    attentionPullDowns.clear();
    dataPullDowns.clear();
    clockPullDowns.clear();
  }
  
  public void pullDownAtn(Object device) {
    attentionPullDowns.add(device);
  }
  
  public void pullDownData(Object device) {
    dataPullDowns.add(device);
  }
  
  public void pullDownClock(Object device) {
    clockPullDowns.add(device);
  }
  
  public void releaseAtn(Object device) {
    attentionPullDowns.remove(device);
  }
  
  public void releaseData(Object device) {
    dataPullDowns.remove(device);
  }
  
  public void releaseClock(Object device) {
    clockPullDowns.remove(device);
  }
  
  /**
   * Gets the ATN line's current logic level.
   * 
   * @return The ATN line's current logic level.
   */
  public boolean getAtn() {
    return (attentionPullDowns.size() > 0);
  }
  
  /**
   * Gets the DATA line's current logic level.
   * 
   * @return The DATA line's current logic level.
   */
  public boolean getData() {
    return (dataPullDowns.size() > 0);
  }
  
  /**
   * Gets the CLOCK line's current logic level.
   * 
   * @return The CLOCK line's current logic level.
   */
  public boolean getClock() {
    return (clockPullDowns.size() > 0);
  }
}
